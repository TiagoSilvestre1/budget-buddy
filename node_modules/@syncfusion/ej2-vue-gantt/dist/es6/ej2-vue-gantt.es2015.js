import { Gantt } from '@syncfusion/ej2-gantt';
import { ComponentBase, getProps, gh, isExecute, vueDefineComponent } from '@syncfusion/ej2-vue-base';
import { getValue, isNullOrUndefined, isUndefined } from '@syncfusion/ej2-base';

let ColumnsDirective = vueDefineComponent({
    inject: { custom: { default: null } },
    render(createElement) {
        if (!isExecute) {
            let h = !isExecute ? gh : createElement;
            let slots = null;
            if (!isNullOrUndefined(this.$slots.default)) {
                slots = !isExecute ? this.$slots.default() : this.$slots.default;
            }
            return h('div', { class: 'e-directive' }, slots);
        }
        return;
    },
    updated() {
        if (!isExecute && this.custom) {
            this.custom();
        }
    },
    methods: {
        getTag() {
            return 'e-columns';
        }
    }
});
const ColumnsPlugin = {
    name: 'e-columns',
    install(Vue) {
        Vue.component(ColumnsPlugin.name, ColumnsDirective);
    }
};
/**
 * `e-column` directive represent a column of the VueJS Gantt.
 * It must be contained in a Gantt component(`ejs-gantt`).
 * ```vue
 * <ejs-gantt :dataSource='data' allowSelection='true' allowSorting='true'>
 *   <e-columns>
 *    <e-column field='ID' width='150'/>
 *    <e-column field='taskName' headerText='Task Name' width='200'/>
 *   </e-columns>
 * </ejs-gantt>
 * ```
 */
let ColumnDirective = vueDefineComponent({
    render() {
        return;
    },
    methods: {
        getTag() {
            return 'e-column';
        }
    }
});
const ColumnPlugin = {
    name: 'e-column',
    install(Vue) {
        Vue.component(ColumnPlugin.name, ColumnDirective);
    }
};

let AddDialogFieldsDirective = vueDefineComponent({
    inject: { custom: { default: null } },
    render(createElement) {
        if (!isExecute) {
            let h = !isExecute ? gh : createElement;
            let slots = null;
            if (!isNullOrUndefined(this.$slots.default)) {
                slots = !isExecute ? this.$slots.default() : this.$slots.default;
            }
            return h('div', { class: 'e-directive' }, slots);
        }
        return;
    },
    updated() {
        if (!isExecute && this.custom) {
            this.custom();
        }
    },
    methods: {
        getTag() {
            return 'e-add-dialog-fields';
        }
    }
});
const AddDialogFieldsPlugin = {
    name: 'e-add-dialog-fields',
    install(Vue) {
        Vue.component(AddDialogFieldsPlugin.name, AddDialogFieldsDirective);
    }
};
/**
 * `e-add-dialog-fields` directive represent a add dialog fields in VueJS Gantt.
 * It must be contained in a Gantt component(`ejs-gantt`).
 * ```vue
 * <ejs-gantt :dataSource]='data' allowSelection='true' allowSorting='true'>
 *   <e-add-dialog-fields>
 *     <e-add-dialog-field type='General' headerText='General'/>
 *     <e-add-dialog-field type='Dependency' headerText='Dependency'/>
 *   </e-add-dialog-fields>
 * </ejs-gantt>
 * ```
 */
let AddDialogFieldDirective = vueDefineComponent({
    render() {
        return;
    },
    methods: {
        getTag() {
            return 'e-add-dialog-field';
        }
    }
});
const AddDialogFieldPlugin = {
    name: 'e-add-dialog-field',
    install(Vue) {
        Vue.component(AddDialogFieldPlugin.name, AddDialogFieldDirective);
    }
};

let EditDialogFieldsDirective = vueDefineComponent({
    inject: { custom: { default: null } },
    render(createElement) {
        if (!isExecute) {
            let h = !isExecute ? gh : createElement;
            let slots = null;
            if (!isNullOrUndefined(this.$slots.default)) {
                slots = !isExecute ? this.$slots.default() : this.$slots.default;
            }
            return h('div', { class: 'e-directive' }, slots);
        }
        return;
    },
    updated() {
        if (!isExecute && this.custom) {
            this.custom();
        }
    },
    methods: {
        getTag() {
            return 'e-edit-dialog-fields';
        }
    }
});
const EditDialogFieldsPlugin = {
    name: 'e-edit-dialog-fields',
    install(Vue) {
        Vue.component(EditDialogFieldsPlugin.name, EditDialogFieldsDirective);
    }
};
/**
 * `e-edit-dialog-fields` directive represent a add dialog fields in VueJS Gantt.
 * It must be contained in a Gantt component(`ejs-gantt`).
 * ```vue
 * <ejs-gantt :dataSource]='data' allowSelection='true' allowSorting='true'>
 *   <e-edit-dialog-fields>
 *     <e-edit-dialog-field type='General' headerText='General'/>
 *     <e-edit-dialog-field type='Dependency' headerText='Dependency'/>
 *   </e-edit-dialog-fields>
 * </ejs-gantt>
 * ```
 */
let EditDialogFieldDirective = vueDefineComponent({
    render() {
        return;
    },
    methods: {
        getTag() {
            return 'e-edit-dialog-field';
        }
    }
});
const EditDialogFieldPlugin = {
    name: 'e-edit-dialog-field',
    install(Vue) {
        Vue.component(EditDialogFieldPlugin.name, EditDialogFieldDirective);
    }
};

let DayWorkingTimeCollectionDirective = vueDefineComponent({
    inject: { custom: { default: null } },
    render(createElement) {
        if (!isExecute) {
            let h = !isExecute ? gh : createElement;
            let slots = null;
            if (!isNullOrUndefined(this.$slots.default)) {
                slots = !isExecute ? this.$slots.default() : this.$slots.default;
            }
            return h('div', { class: 'e-directive' }, slots);
        }
        return;
    },
    updated() {
        if (!isExecute && this.custom) {
            this.custom();
        }
    },
    methods: {
        getTag() {
            return 'e-day-working-time-collection';
        }
    }
});
const DayWorkingTimeCollectionPlugin = {
    name: 'e-day-working-time-collection',
    install(Vue) {
        Vue.component(DayWorkingTimeCollectionPlugin.name, DayWorkingTimeCollectionDirective);
    }
};
/**
 * `e-day-working-time-collection` directive represent a working time ranges in a day.
 * It must be contained in a Gantt component(`ejs-gantt`).
 * ```vue
 * <ejs-gantt :dataSource]='data' allowSelection='true' allowSorting='true'>
 *   <e-day-working-time-collection>
 *     <e-day-working-time from='8' to='12'/>
 *     <e-day-working-time from='13' to='17'/>
 *   </e-day-working-time-collection>
 * </ejs-gantt>
 * ```
 */
let DayWorkingTimeDirective = vueDefineComponent({
    render() {
        return;
    },
    methods: {
        getTag() {
            return 'e-day-working-time';
        }
    }
});
const DayWorkingTimePlugin = {
    name: 'e-day-working-time',
    install(Vue) {
        Vue.component(DayWorkingTimePlugin.name, DayWorkingTimeDirective);
    }
};

let HolidaysDirective = vueDefineComponent({
    inject: { custom: { default: null } },
    render(createElement) {
        if (!isExecute) {
            let h = !isExecute ? gh : createElement;
            let slots = null;
            if (!isNullOrUndefined(this.$slots.default)) {
                slots = !isExecute ? this.$slots.default() : this.$slots.default;
            }
            return h('div', { class: 'e-directive' }, slots);
        }
        return;
    },
    updated() {
        if (!isExecute && this.custom) {
            this.custom();
        }
    },
    methods: {
        getTag() {
            return 'e-holidays';
        }
    }
});
const HolidaysPlugin = {
    name: 'e-holidays',
    install(Vue) {
        Vue.component(HolidaysPlugin.name, HolidaysDirective);
    }
};
/**
 * `e-holidays` directive represent a holidays collection in Gantt.
 * It must be contained in a Gantt component(`ejs-gantt`).
 * ```vue
 * <ejs-gantt :dataSource]='data' allowSelection='true' allowSorting='true'>
 *   <e-holidays>
 *     <e-holiday from='02/20/2018' label='Holiday 1'/>
 *     <e-holiday from='05/15/2018' label='Holiday 2'/>
 *   </e-holidays>
 * </ejs-gantt>
 * ```
 */
let HolidayDirective = vueDefineComponent({
    render() {
        return;
    },
    methods: {
        getTag() {
            return 'e-holidays';
        }
    }
});
const HolidayPlugin = {
    name: 'e-holidays',
    install(Vue) {
        Vue.component(HolidayPlugin.name, HolidayDirective);
    }
};

let EventMarkersDirective = vueDefineComponent({
    inject: { custom: { default: null } },
    render(createElement) {
        if (!isExecute) {
            let h = !isExecute ? gh : createElement;
            let slots = null;
            if (!isNullOrUndefined(this.$slots.default)) {
                slots = !isExecute ? this.$slots.default() : this.$slots.default;
            }
            return h('div', { class: 'e-directive' }, slots);
        }
        return;
    },
    updated() {
        if (!isExecute && this.custom) {
            this.custom();
        }
    },
    methods: {
        getTag() {
            return 'e-event-markers';
        }
    }
});
const EventMarkersPlugin = {
    name: 'e-event-markers',
    install(Vue) {
        Vue.component(EventMarkersPlugin.name, EventMarkersDirective);
    }
};
/**
 * `e-event-markers` directive represent a event marker collection in Gantt
 * It must be contained in a Gantt component(`ejs-gantt`).
 * ```vue
 * <ejs-gantt :dataSource]='data' allowSelection='true' allowSorting='true'>
 *   <e-event-markers>
 *     <e-event-marker day='02/10/2018' label='Project Starts'/>
 *   </e-event-markers>
 * </ejs-gantt>
 * ```
 */
let EventMarkerDirective = vueDefineComponent({
    render() {
        return;
    },
    methods: {
        getTag() {
            return 'e-event-marker';
        }
    }
});
const EventMarkerPlugin = {
    name: 'e-event-marker',
    install(Vue) {
        Vue.component(EventMarkerPlugin.name, EventMarkerDirective);
    }
};

const properties = ['isLazyUpdate', 'plugins', 'UpdateOffsetOnTaskbarEdit', 'addDialogFields', 'allowExcelExport', 'allowFiltering', 'allowKeyboard', 'allowParentDependency', 'allowPdfExport', 'allowReordering', 'allowResizing', 'allowRowDragAndDrop', 'allowSelection', 'allowSorting', 'allowTaskbarDragAndDrop', 'allowTaskbarOverlap', 'allowUnscheduledTasks', 'autoCalculateDateScheduling', 'autoFocusTasks', 'baselineColor', 'collapseAllParentTasks', 'columnMenuItems', 'columns', 'connectorLineBackground', 'connectorLineWidth', 'contextMenuItems', 'dataSource', 'dateFormat', 'dayWorkingTime', 'disableHtmlEncode', 'durationUnit', 'editDialogFields', 'editSettings', 'enableContextMenu', 'enableCriticalPath', 'enableHtmlSanitizer', 'enableImmutableMode', 'enableMultiTaskbar', 'enablePersistence', 'enablePredecessorValidation', 'enableRtl', 'enableVirtualMaskRow', 'enableVirtualization', 'eventMarkers', 'filterSettings', 'gridLines', 'height', 'highlightWeekends', 'holidays', 'includeWeekend', 'labelSettings', 'loadingIndicator', 'locale', 'milestoneTemplate', 'parentTaskbarTemplate', 'projectEndDate', 'projectStartDate', 'query', 'readOnly', 'renderBaseline', 'resourceFields', 'resourceIDMapping', 'resourceNameMapping', 'resources', 'rowHeight', 'searchSettings', 'segmentData', 'selectedRowIndex', 'selectionSettings', 'showColumnMenu', 'showInlineNotes', 'showOverAllocation', 'sortSettings', 'splitterSettings', 'taskFields', 'taskMode', 'taskType', 'taskbarHeight', 'taskbarTemplate', 'timelineSettings', 'timezone', 'toolbar', 'tooltipSettings', 'treeColumnIndex', 'validateManualTasksOnLinking', 'viewType', 'width', 'workUnit', 'workWeek', 'zoomingLevels', 'actionBegin', 'actionComplete', 'actionFailure', 'beforeExcelExport', 'beforePdfExport', 'beforeTooltipRender', 'cellDeselected', 'cellDeselecting', 'cellEdit', 'cellSelected', 'cellSelecting', 'collapsed', 'collapsing', 'columnDrag', 'columnDragStart', 'columnDrop', 'columnMenuClick', 'columnMenuOpen', 'contextMenuClick', 'contextMenuOpen', 'created', 'dataBound', 'dataStateChange', 'destroyed', 'endEdit', 'excelExportComplete', 'excelHeaderQueryCellInfo', 'excelQueryCellInfo', 'expanded', 'expanding', 'headerCellInfo', 'load', 'onMouseMove', 'onTaskbarClick', 'pdfColumnHeaderQueryCellInfo', 'pdfExportComplete', 'pdfQueryCellInfo', 'pdfQueryTaskbarInfo', 'pdfQueryTimelineCellInfo', 'queryCellInfo', 'queryTaskbarInfo', 'recordDoubleClick', 'resizeStart', 'resizeStop', 'resizing', 'rowDataBound', 'rowDeselected', 'rowDeselecting', 'rowDrag', 'rowDragStart', 'rowDragStartHelper', 'rowDrop', 'rowSelected', 'rowSelecting', 'splitterResizeStart', 'splitterResized', 'splitterResizing', 'taskbarEdited', 'taskbarEditing', 'toolbarClick'];
const modelProps = ['dataSource'];
const testProp = getProps({ props: properties });
const props = testProp[0];
const watch = testProp[1];
const emitProbs = Object.keys(watch);
emitProbs.push('modelchanged', 'update:modelValue');
for (let props of modelProps) {
    emitProbs.push('update:' + props);
}
/**
 * `ejs-gantt` represents the VueJS Gantt Component.
 * ```vue
 * <ejs-gantt :dataSource='data' allowSelection='true' allowSorting='true'></ejs-gantt>
 * ```
 */
let GanttComponent = vueDefineComponent({
    name: 'GanttComponent',
    mixins: [ComponentBase],
    props: props,
    watch: watch,
    emits: emitProbs,
    model: { event: 'modelchanged' },
    provide() { return { custom: this.custom }; },
    data() {
        return {
            ej2Instances: new Gantt({}),
            propKeys: properties,
            models: modelProps,
            hasChildDirective: true,
            hasInjectedModules: true,
            tagMapper: { "e-columns": "e-column", "e-add-dialog-fields": "e-add-dialog-field", "e-edit-dialog-fields": "e-edit-dialog-field", "e-day-working-time-collection": "e-day-working-time", "e-holidays": "e-holidays", "e-event-markers": "e-event-marker" },
            tagNameMapper: { "e-add-dialog-fields": "e-addDialogFields", "e-edit-dialog-fields": "e-editDialogFields", "e-day-working-time-collection": "e-dayWorkingTime", "e-event-markers": "e-eventMarkers" },
            isVue3: !isExecute,
            templateCollection: {},
        };
    },
    created() {
        this.ej2Instances._trigger = this.ej2Instances.trigger;
        this.ej2Instances.trigger = this.trigger;
        this.bindProperties();
        this.ej2Instances._setProperties = this.ej2Instances.setProperties;
        this.ej2Instances.setProperties = this.setProperties;
        this.ej2Instances.clearTemplate = this.clearTemplate;
        this.updated = this.updated;
    },
    render(createElement) {
        let h = !isExecute ? gh : createElement;
        let slots = null;
        if (!isNullOrUndefined(this.$slots.default)) {
            slots = !isExecute ? this.$slots.default() : this.$slots.default;
        }
        return h('div', slots);
    },
    methods: {
        clearTemplate(templateNames) {
            if (!templateNames) {
                templateNames = Object.keys(this.templateCollection || {});
            }
            if (templateNames.length && this.templateCollection) {
                for (let tempName of templateNames) {
                    let elementCollection = this.templateCollection[tempName];
                    if (elementCollection && elementCollection.length) {
                        for (let ele of elementCollection) {
                            let destroy = getValue('__vue__.$destroy', ele);
                            if (destroy) {
                                ele.__vue__.$destroy();
                            }
                            if (ele.innerHTML) {
                                ele.innerHTML = '';
                            }
                        }
                        delete this.templateCollection[tempName];
                    }
                }
            }
        },
        setProperties(prop, muteOnChange) {
            if (this.isVue3) {
                this.models = !this.models ? this.ej2Instances.referModels : this.models;
            }
            if (this.ej2Instances && this.ej2Instances._setProperties) {
                this.ej2Instances._setProperties(prop, muteOnChange);
            }
            if (prop && this.models && this.models.length) {
                Object.keys(prop).map((key) => {
                    this.models.map((model) => {
                        if ((key === model) && !(/datasource/i.test(key))) {
                            if (this.isVue3) {
                                this.ej2Instances.vueInstance.$emit('update:' + key, prop[key]);
                            }
                            else {
                                this.$emit('update:' + key, prop[key]);
                                this.$emit('modelchanged', prop[key]);
                            }
                        }
                    });
                });
            }
        },
        trigger(eventName, eventProp, successHandler) {
            if (!isExecute) {
                this.models = !this.models ? this.ej2Instances.referModels : this.models;
            }
            if ((eventName === 'change' || eventName === 'input') && this.models && (this.models.length !== 0)) {
                let key = this.models.toString().match(/checked|value/) || [];
                let propKey = key[0];
                if (eventProp && key && !isUndefined(eventProp[propKey])) {
                    if (!isExecute) {
                        this.ej2Instances.vueInstance.$emit('update:' + propKey, eventProp[propKey]);
                        this.ej2Instances.vueInstance.$emit('modelchanged', eventProp[propKey]);
                        this.ej2Instances.vueInstance.$emit('update:modelValue', eventProp[propKey]);
                    }
                    else {
                        if (eventName === 'change' || (this.$props && !this.$props.isLazyUpdate)) {
                            this.$emit('update:' + propKey, eventProp[propKey]);
                            this.$emit('modelchanged', eventProp[propKey]);
                        }
                    }
                }
            }
            else if ((eventName === 'actionBegin' && eventProp.requestType === 'dateNavigate') && this.models && (this.models.length !== 0)) {
                let key = this.models.toString().match(/currentView|selectedDate/) || [];
                let propKey = key[0];
                if (eventProp && key && !isUndefined(eventProp[propKey])) {
                    if (!isExecute) {
                        this.ej2Instances.vueInstance.$emit('update:' + propKey, eventProp[propKey]);
                        this.ej2Instances.vueInstance.$emit('modelchanged', eventProp[propKey]);
                    }
                    else {
                        this.$emit('update:' + propKey, eventProp[propKey]);
                        this.$emit('modelchanged', eventProp[propKey]);
                    }
                }
            }
            if ((this.ej2Instances && this.ej2Instances._trigger)) {
                this.ej2Instances._trigger(eventName, eventProp, successHandler);
            }
        },
        custom() {
            this.updated();
        },
        addPredecessor(id, predecessorString) {
            return this.ej2Instances.addPredecessor(id, predecessorString);
        },
        addRecord(data, rowPosition, rowIndex) {
            return this.ej2Instances.addRecord(data, rowPosition, rowIndex);
        },
        cancelEdit() {
            return this.ej2Instances.cancelEdit();
        },
        changeTaskMode(data) {
            return this.ej2Instances.changeTaskMode(data);
        },
        clearFiltering(fields) {
            return this.ej2Instances.clearFiltering(fields);
        },
        clearSelection() {
            return this.ej2Instances.clearSelection();
        },
        clearSorting() {
            return this.ej2Instances.clearSorting();
        },
        collapseAll() {
            return this.ej2Instances.collapseAll();
        },
        collapseByID(id) {
            return this.ej2Instances.collapseByID(id);
        },
        collapseByIndex(index) {
            return this.ej2Instances.collapseByIndex(index);
        },
        convertToMilestone(id) {
            return this.ej2Instances.convertToMilestone(id);
        },
        csvExport(excelExportProperties, isMultipleExport, workbook, isBlob) {
            return this.ej2Instances.csvExport(excelExportProperties, isMultipleExport, workbook, isBlob);
        },
        deleteRecord(taskDetail) {
            return this.ej2Instances.deleteRecord(taskDetail);
        },
        enableItems(items, isEnable) {
            return this.ej2Instances.enableItems(items, isEnable);
        },
        excelExport(excelExportProperties, isMultipleExport, workbook, isBlob) {
            return this.ej2Instances.excelExport(excelExportProperties, isMultipleExport, workbook, isBlob);
        },
        expandAll() {
            return this.ej2Instances.expandAll();
        },
        expandByID(id) {
            return this.ej2Instances.expandByID(id);
        },
        expandByIndex(index) {
            return this.ej2Instances.expandByIndex(index);
        },
        filterByColumn(fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent) {
            return this.ej2Instances.filterByColumn(fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent);
        },
        fitToProject() {
            return this.ej2Instances.fitToProject();
        },
        getCriticalTasks() {
            return this.ej2Instances.getCriticalTasks();
        },
        getDurationString(duration, durationUnit) {
            return this.ej2Instances.getDurationString(duration, durationUnit);
        },
        getExpandedRecords(records) {
            return this.ej2Instances.getExpandedRecords(records);
        },
        getFormatedDate(date, format) {
            return this.ej2Instances.getFormatedDate(date, format);
        },
        getGanttColumns() {
            return this.ej2Instances.getGanttColumns();
        },
        getGridColumns() {
            return this.ej2Instances.getGridColumns();
        },
        getRecordByID(id) {
            return this.ej2Instances.getRecordByID(id);
        },
        getRowByID(id) {
            return this.ej2Instances.getRowByID(id);
        },
        getRowByIndex(index) {
            return this.ej2Instances.getRowByIndex(index);
        },
        getTaskByUniqueID(id) {
            return this.ej2Instances.getTaskByUniqueID(id);
        },
        getTaskbarHeight() {
            return this.ej2Instances.getTaskbarHeight();
        },
        getWorkString(work, workUnit) {
            return this.ej2Instances.getWorkString(work, workUnit);
        },
        hideColumn(keys, hideBy) {
            return this.ej2Instances.hideColumn(keys, hideBy);
        },
        hideMaskRow() {
            return this.ej2Instances.hideMaskRow();
        },
        hideSpinner() {
            return this.ej2Instances.hideSpinner();
        },
        indent() {
            return this.ej2Instances.indent();
        },
        keyActionHandler(e) {
            return this.ej2Instances.keyActionHandler(e);
        },
        mergeTask(taskId, segmentIndexes) {
            return this.ej2Instances.mergeTask(taskId, segmentIndexes);
        },
        nextTimeSpan(mode) {
            return this.ej2Instances.nextTimeSpan(mode);
        },
        openAddDialog() {
            return this.ej2Instances.openAddDialog();
        },
        openEditDialog(taskId) {
            return this.ej2Instances.openEditDialog(taskId);
        },
        outdent() {
            return this.ej2Instances.outdent();
        },
        pdfExport(pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {
            return this.ej2Instances.pdfExport(pdfExportProperties, isMultipleExport, pdfDoc, isBlob);
        },
        previousTimeSpan(mode) {
            return this.ej2Instances.previousTimeSpan(mode);
        },
        removeCriticalPathStyles() {
            return this.ej2Instances.removeCriticalPathStyles();
        },
        removePredecessor(id) {
            return this.ej2Instances.removePredecessor(id);
        },
        removeSortColumn(columnName) {
            return this.ej2Instances.removeSortColumn(columnName);
        },
        renderTemplates() {
            return this.ej2Instances.renderTemplates();
        },
        reorderColumns(fromFName, toFName) {
            return this.ej2Instances.reorderColumns(fromFName, toFName);
        },
        reorderRows(fromIndexes, toIndex, position) {
            return this.ej2Instances.reorderRows(fromIndexes, toIndex, position);
        },
        resetTemplates() {
            return this.ej2Instances.resetTemplates();
        },
        scrollToDate(date) {
            return this.ej2Instances.scrollToDate(date);
        },
        scrollToTask(taskId) {
            return this.ej2Instances.scrollToTask(taskId);
        },
        search(keyVal) {
            return this.ej2Instances.search(keyVal);
        },
        selectCell(cellIndex, isToggle) {
            return this.ej2Instances.selectCell(cellIndex, isToggle);
        },
        selectCells(rowCellIndexes) {
            return this.ej2Instances.selectCells(rowCellIndexes);
        },
        selectRow(index, isToggle) {
            return this.ej2Instances.selectRow(index, isToggle);
        },
        selectRows(records) {
            return this.ej2Instances.selectRows(records);
        },
        setScrollTop(scrollTop) {
            return this.ej2Instances.setScrollTop(scrollTop);
        },
        setSplitterPosition(value, type) {
            return this.ej2Instances.setSplitterPosition(value, type);
        },
        showColumn(keys, showBy) {
            return this.ej2Instances.showColumn(keys, showBy);
        },
        showCriticalPath(isCritical) {
            return this.ej2Instances.showCriticalPath(isCritical);
        },
        showMaskRow() {
            return this.ej2Instances.showMaskRow();
        },
        showSpinner() {
            return this.ej2Instances.showSpinner();
        },
        sortColumn(columnName, direction, isMultiSort) {
            return this.ej2Instances.sortColumn(columnName, direction, isMultiSort);
        },
        splitTask(taskId, splitDate) {
            return this.ej2Instances.splitTask(taskId, splitDate);
        },
        updateChartScrollOffset(left, top) {
            return this.ej2Instances.updateChartScrollOffset(left, top);
        },
        updateDataSource(dataSource, args) {
            return this.ej2Instances.updateDataSource(dataSource, args);
        },
        updatePredecessor(id, predecessorString) {
            return this.ej2Instances.updatePredecessor(id, predecessorString);
        },
        updateProjectDates(startDate, endDate, isTimelineRoundOff, isFrom) {
            return this.ej2Instances.updateProjectDates(startDate, endDate, isTimelineRoundOff, isFrom);
        },
        updateRecordByID(data) {
            return this.ej2Instances.updateRecordByID(data);
        },
        updateRecordByIndex(index, data) {
            return this.ej2Instances.updateRecordByIndex(index, data);
        },
        updateTaskId(currentId, newId) {
            return this.ej2Instances.updateTaskId(currentId, newId);
        },
        zoomIn() {
            return this.ej2Instances.zoomIn();
        },
        zoomOut() {
            return this.ej2Instances.zoomOut();
        },
    }
});
const GanttPlugin = {
    name: 'ejs-gantt',
    install(Vue) {
        Vue.component(GanttPlugin.name, GanttComponent);
        Vue.component(ColumnPlugin.name, ColumnDirective);
        Vue.component(ColumnsPlugin.name, ColumnsDirective);
        Vue.component(AddDialogFieldPlugin.name, AddDialogFieldDirective);
        Vue.component(AddDialogFieldsPlugin.name, AddDialogFieldsDirective);
        Vue.component(EditDialogFieldPlugin.name, EditDialogFieldDirective);
        Vue.component(EditDialogFieldsPlugin.name, EditDialogFieldsDirective);
        Vue.component(DayWorkingTimePlugin.name, DayWorkingTimeDirective);
        Vue.component(DayWorkingTimeCollectionPlugin.name, DayWorkingTimeCollectionDirective);
        Vue.component(HolidayPlugin.name, HolidayDirective);
        Vue.component(HolidaysPlugin.name, HolidaysDirective);
        Vue.component(EventMarkerPlugin.name, EventMarkerDirective);
        Vue.component(EventMarkersPlugin.name, EventMarkersDirective);
    }
};

export { ColumnsDirective, ColumnDirective, ColumnsPlugin, ColumnPlugin, AddDialogFieldsDirective, AddDialogFieldDirective, AddDialogFieldsPlugin, AddDialogFieldPlugin, EditDialogFieldsDirective, EditDialogFieldDirective, EditDialogFieldsPlugin, EditDialogFieldPlugin, DayWorkingTimeCollectionDirective, DayWorkingTimeDirective, DayWorkingTimeCollectionPlugin, DayWorkingTimePlugin, HolidaysDirective, HolidayDirective, HolidaysPlugin, HolidayPlugin, EventMarkersDirective, EventMarkerDirective, EventMarkersPlugin, EventMarkerPlugin, GanttComponent, GanttPlugin };
export * from '@syncfusion/ej2-gantt';
//# sourceMappingURL=ej2-vue-gantt.es2015.js.map
